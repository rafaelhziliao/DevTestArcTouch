//
//  MovieDetailViewController.swift
//  DevTestArcTouch
//
//  Created by Rafael Zilião on 07/08/2018.
//  Copyright (c) 2018 Rafael Zilião. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AlamofireImage

protocol MovieDetailDisplayLogic: class {
    func displaySomething(viewModel: MovieDetail.Something.ViewModel)
    func displayMovieDetails(viewModel: MovieDetail.FetchMovieDetails.ViewModel)
}

class MovieDetailViewController: UIViewController, MovieDetailDisplayLogic {
    var interactor: MovieDetailBusinessLogic?
    var router: (NSObjectProtocol & MovieDetailRoutingLogic & MovieDetailDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = MovieDetailInteractor()
        let presenter = MovieDetailPresenter()
        let router = MovieDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func setupViews() {
    }
    
    func setupEffects() {
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
        self.fetchMovieDetails()
        self.detailTableView.delegate = self
        self.detailTableView.dataSource = self
        self.detailTableView.rowHeight = 400
        self.detailTableView.backgroundColor = UIColor.Colors.primaryBackgroundColor
        self.detailTableView.separatorColor = UIColor.Colors.primaryBackgroundColor
    }
    
    // MARK: Do something
    
    func fetchMovieDetails() {
        let request = MovieDetail.FetchMovieDetails.Request(movie: nil)
        self.interactor?.fetchMovieDetails(request: request)
    }
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet var detailTableView: UITableView!
    @IBOutlet weak var backDropImageView: UIImageView!
    private var movie: Movie? {
        didSet {
            self.detailTableView.reloadData()
        }
    }
    
    func doSomething() {
        let request = MovieDetail.Something.Request()
        interactor?.doSomething(request: request)
    }
  
    func displaySomething(viewModel: MovieDetail.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    func displayMovieDetails(viewModel: MovieDetail.FetchMovieDetails.ViewModel) {
        self.backDropImageView.af_setImage(withURL: URL(string: viewModel.movie.posterPath(size: .medium))!, imageTransition: .crossDissolve(0.2))
        self.movie = viewModel.movie
    }
}

extension MovieDetailViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = detailTableView.dequeueReusableCell(withIdentifier: MovieDetailCell.identifier, for: indexPath) as? MovieDetailCell {

            guard let _movie = self.movie else {
                return UITableViewCell()
            }
            
            cell.render(movie: _movie)

            return cell
        }
        else {
            return UITableViewCell()
        }

    }
    
}

